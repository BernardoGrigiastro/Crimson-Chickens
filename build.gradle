plugins {
    id 'fabric-loom' version '0.10-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.

    maven { url "https://maven.shedaniel.me/" }

//    maven {
//        name = "HYWLA"
//        url = "https://maven.tehnut.info/"
//        content {
//            includeGroup "mcp.mobius.waila"
//        }
//    }

  maven { url "https://maven.bai.lol" }
  }

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modApi("me.shedaniel.cloth:cloth-config-fabric:4.11.26") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
    // You may need to force-disable transitiveness on them.

//    modCompileOnly("mcp.mobius.waila:Hwyla:1.16.2-1.9.23-79") {
//        exclude group: "net.fabricmc.fabric-api"
//    }
    //modRuntime("mcp.mobius.waila:Hwyla:1.16.2-1.9.23-79") {}


    modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:${rei_version}"
    modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:${rei_version}"

    modCompileOnly "mcp.mobius.waila:wthit-api:fabric-${wthitVersion}"
    modRuntime "mcp.mobius.waila:wthit:fabric-${wthitVersion}"
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 8
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
    }
}
